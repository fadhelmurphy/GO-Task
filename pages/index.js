import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import styles from "../styles/Home.module.css";

export default function Home({data}) {
  const [input, setInput] = useState({
    number: 0,
    result: 0,
  });

  let numToWords = (n) => {
    const arr = (x) => Array.from(x);
    const num = (x) => Number(x) || 0;
    const str = (x) => String(x);
    const isEmpty = (xs) => xs.length === 0;
    const take = (n) => (xs) => xs.slice(0, n);
    const drop = (n) => (xs) => xs.slice(n);
    const reverse = (xs) => xs.reverse();
    const comp = (f) => (g) => (x) => f(g(x));
    const not = (x) => !x;
    const chunk = (n) => (xs) =>
      isEmpty(xs) ? [] : [take(n)(xs), ...chunk(n)(drop(n)(xs))];
    let a = [
      "",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "ten",
      "eleven",
      "twelve",
      "thirteen",
      "fourteen",
      "fifteen",
      "sixteen",
      "seventeen",
      "eighteen",
      "nineteen",
    ];

    let b = [
      "",
      "",
      "twenty",
      "thirty",
      "forty",
      "fifty",
      "sixty",
      "seventy",
      "eighty",
      "ninety",
    ];

    let g = [
      "",
      "thousand",
      "million",
      "billion",
      "trillion",
      "quadrillion",
      "quintillion",
      "sextillion",
      "septillion",
      "octillion",
      "nonillion",
    ];

    // this part is really nasty still
    // it might edit this again later to show how Monoids could fix this up
    let makeGroup = ([ones, tens, huns]) => {
      return [
        num(huns) === 0 ? "" : a[huns] + " hundred ",
        num(ones) === 0 ? b[tens] : (b[tens] && b[tens] + " ") || "",
        a[tens + ones] || a[ones],
      ].join("");
    };

    let thousand = (group, i) => (group === "" ? group : `${group} ${g[i]}`);

    if (typeof n === "number") return numToWords(String(n));
    else if (n === "0") return "zero";
    else
      return comp(chunk(3))(reverse)(arr(n))
        .map(makeGroup)
        .map(thousand)
        .filter(comp(not)(isEmpty))
        .reverse()
        .join(" ");
  };

  const onSubmit = (event) => {
    event.preventDefault()
    const result = numToWords(input.number);
    setInput(prev => ({ ...prev, result }));
  };

  return (
    <>
    <div className="layout-container">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <form onSubmit={onSubmit}>
        <label htmlFor="fname">First Name</label>
        <input
          type="text"
          id="fname"
          name="fname"
          onChange={({target: {value}}) => setInput(prev => ({ ...prev, number: value }))}
        />
        <input type="submit" />
      </form>
      <p>{input.result}</p>
      <div className="list">
        {data?.length > 0 && data.map((item) => <>
          <div className="card">
              <img src={item?.download_url} />
            </div>
        </>)}
      </div>
      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
    <style jsx>
      {`
        .layout-container {
          flex-grow: 1;
          margin: 0 auto 30px;
          max-width: 935px;
        }
        .list {
          display: grid;
          grid-template-columns: repeat(3,1fr);
          grid-gap: 28px;
        }
        .card {
          display: flex;
          flex-direction: column;
          overflow: hidden;
          height: 293px;
          position: relative;
        }
        .card img {
          position: absolute;
          inset: 0px;
          box-sizing: border-box;
          padding: 0px;
          border: none;
          margin: auto;
          display: block;
          width: 0px;
          height: 0px;
          min-width: 100%;
          max-width: 100%;
          min-height: 100%;
          max-height: 100%;
          object-fit: cover;
        }
      `}
    </style>
    </>
  );
}

export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://picsum.photos/v2/list?page=3&limit=10`)
  const data = await res.json()

  // Pass data to the page via props
  return { props: { data } }
}
